# Auto-generated using compose2nix v0.2.0-pre.
{
  pkgs,
  lib,
  ...
}:
{
  virtualisation.oci-containers.containers."freshrss" = {
    image = "lscr.io/linuxserver/freshrss:latest";
    environment = {
      PGID = "100";
      PUID = "1000";
      TZ = "Europe/Berlin";
    };
    volumes = [
      "/storage/encrypted/appdata/freshrss/config:/config:rw"
    ];
    ports = [
      "5006:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=freshrss"
      "--network=freshrss_default"
    ];
  };
  systemd.services."docker-freshrss" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-freshrss_default.service"
    ];
    requires = [
      "docker-network-freshrss_default.service"
    ];
    partOf = [
      "docker-compose-freshrss-root.target"
    ];
    wantedBy = [
      "docker-compose-freshrss-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-freshrss_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f freshrss_default";
    };
    script = ''
      docker network inspect freshrss_default || docker network create freshrss_default
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-freshrss-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
